// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powerstore/internal/service (interfaces: PowerStoreClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gopowerstore "github.com/dell/gopowerstore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPowerStoreClient is a mock of PowerStoreClient interface
type MockPowerStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockPowerStoreClientMockRecorder
}

// MockPowerStoreClientMockRecorder is the mock recorder for MockPowerStoreClient
type MockPowerStoreClientMockRecorder struct {
	mock *MockPowerStoreClient
}

// NewMockPowerStoreClient creates a new mock instance
func NewMockPowerStoreClient(ctrl *gomock.Controller) *MockPowerStoreClient {
	mock := &MockPowerStoreClient{ctrl: ctrl}
	mock.recorder = &MockPowerStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPowerStoreClient) EXPECT() *MockPowerStoreClientMockRecorder {
	return m.recorder
}

// PerformanceMetricsByVolume mocks base method
func (m *MockPowerStoreClient) PerformanceMetricsByVolume(arg0 context.Context, arg1 string, arg2 gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformanceMetricsByVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].([]gopowerstore.PerformanceMetricsByVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformanceMetricsByVolume indicates an expected call of PerformanceMetricsByVolume
func (mr *MockPowerStoreClientMockRecorder) PerformanceMetricsByVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformanceMetricsByVolume", reflect.TypeOf((*MockPowerStoreClient)(nil).PerformanceMetricsByVolume), arg0, arg1, arg2)
}

// SpaceMetricsByVM mocks base method
func (m *MockPowerStoreClient) SpaceMetricsByVM(arg0 context.Context, arg1 string, arg2 gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVMResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceMetricsByVM", arg0, arg1, arg2)
	ret0, _ := ret[0].([]gopowerstore.SpaceMetricsByVMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceMetricsByVM indicates an expected call of SpaceMetricsByVM
func (mr *MockPowerStoreClientMockRecorder) SpaceMetricsByVM(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceMetricsByVM", reflect.TypeOf((*MockPowerStoreClient)(nil).SpaceMetricsByVM), arg0, arg1, arg2)
}
